
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id              String        @id @default(uuid())
  username        String        @unique
  name            String?  
  surname         String?  
  role            Role
  email           String?   
  password        String
  img             String?
  dateOfBirth     DateTime? 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Student {
  id              String        @id @default(uuid())
  username        String        @unique
  role            Role
  name            String  
  surname         String  
  email           String?       @unique
  password        String
  phone           String?       @unique
  address         String?
  img             String?
  bloodType       String?
  sex             Sex?
  dateOfBirth     DateTime? 
  parentId        String
  parent          Parent        @relation(fields: [parentId], references: [id] )
  classId         String
  class           Class         @relation(fields: [classId], references: [id] )
  gradeId         String        @default(uuid())
  grade           Grade[]       
  attendances     Attendance[]
  results         Result[]
  submissions     Submission[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([parentId])
  @@index([classId])
  @@index([gradeId])
}

model Teacher{
  id              String        @id @default(uuid())
  username        String        @unique
  role            Role
  name            String  
  surname         String  
  email           String?       @unique
  password        String
  phone           String?       @unique
  address         String?
  img             String?
  bloodType       String?
  sex             Sex?
  dateOfBirth     DateTime? 
  exams           Exam[]
  subjects        Subject[]
  lessons         Lesson[]
  classes         Class[]
  assignments     Assignment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Parent {
  id              String        @id @default(uuid())
  username        String        @unique
  role            Role
  name            String  
  surname         String  
  email           String?       @unique
  password        String
  phone           String ?       @unique
  address         String?
  img             String?
  dateOfBirth     DateTime? 
  students        Student[]
  invoices        Invoice[]
  payments        Payment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ParentStudentLink {
  id        String   @id @default(uuid())
  studentId String
  parentId  String
  
  @@unique([studentId, parentId]) 
}

model Grade {
  id              String        @id @default(uuid())
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id])
  score           Float
  examId          String?
  exam            Exam?         @relation(fields: [examId], references: [id])
  assignmentId    String?
  assignment      Assignment?   @relation(fields: [assignmentId], references: [id])
  type            GradeType
  subjects        Subject[]   
  submissions     Submission[] 
  academicPeriod  String
  comments        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([studentId, examId, assignmentId, academicPeriod])

  @@index([studentId])
  @@index([examId])
  @@index([assignmentId])
}

model Class {
  id              String        @id @default(uuid())
  name            String        @unique
  capacity        Int 
  lessons         Lesson[]
  students        Student[]
  supervisorId    String?
  supervisor      Teacher?      @relation(fields: [supervisorId], references: [id] )
  exams           Exam[]
  events          Event[]
  subjects        Subject[]   
  assignments     Assignment[]
  attendances     Attendance[]
  announcements   Announcement[]
  feeStructureId  String?
  feeStructure    FeeStructure?  @relation(fields: [feeStructureId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
} 

model Subject {
  id              String        @id @default(uuid())
  name            String        
  exams           Exam[]
  teachers        Teacher[]
  lessons         Lesson[]
  assignments     Assignment[]
  gradeId         String?
  grade           Grade?        @relation(fields: [gradeId], references: [id] )
  classId         String
  class           Class         @relation(fields: [classId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Lesson {
  id              String        @id @default(uuid())
  name            String
  day             String
  startTime       String
  endTime         String
  subjectId       String
  subject         Subject       @relation(fields: [subjectId], references: [id] )
  classId         String
  class           Class         @relation(fields: [classId], references: [id])
  teacherId       String?
  teacher         Teacher?      @relation(fields: [teacherId], references: [id])
  description     String?       // General lesson description
  content         Json?         // Store lesson content/materials as JSON
  assignments     Assignment[]
  attendances     Attendance[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Exam {
  id              String        @id @default(uuid())
  title           String
  startTime       DateTime
  endTime         DateTime
  date            DateTime  
  classId         String          
  class           Class         @relation(fields: [classId], references: [id])
  subjectId       String          
  subject         Subject       @relation(fields: [subjectId], references: [id])
  teacherId       String       
  teacher         Teacher       @relation(fields: [teacherId], references: [id])
  results         Result[]
  gradeId         String?
  grade           Grade[] //?
  description     String?       // General exam description
  instructions    String?       // Markdown instructions for students
  content         Json?         // Store MCQs and other question types as JSON
  questions       Question[]    // Relation to structured questions
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Assignment {
  id              String        @id @default(uuid())
  title           String    
  startDate       DateTime    
  dueDate         DateTime
  description     String?       // General assignment description
  instructions    String?       // Markdown instructions for students
  content         Json?         // Store structured content as JSON  
  questions       Question[]    // Relation to structured questions  
  lessonId        String   
  lesson          Lesson        @relation(fields: [lessonId], references: [id])
  teacherId       String        
  teacher         Teacher       @relation(fields: [teacherId], references: [id])
  subjectId       String   
  subject         Subject       @relation(fields: [subjectId], references: [id])
  classId         String   
  class           Class         @relation(fields: [classId], references: [id])
  grade           Grade[]
  results         Result[]    
  submissions     Submission[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Submission {
  id              String        @id @default(uuid())
  assignmentId    String
  assignment      Assignment    @relation(fields: [assignmentId], references: [id])
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id] )
  gradeId         String
  grade           Grade?        @relation(fields: [gradeId], references: [id])  
  submissionDate  DateTime      @default(now()) 
  status          String        // Submission status (e.g., 'submitted', 'graded', 'late')
  content         String?       // Optional field to store submission content (e.g., file URL or text)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([assignmentId])
  @@index([studentId])
  @@index([gradeId])
}

model Result {
  id              String        @id @default(uuid())
  score           Int
  examId          String?
  exam            Exam?         @relation(fields: [examId], references: [id]) 
  assignmentId    String?
  assignment      Assignment?   @relation(fields: [assignmentId], references: [id])  
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id] )    
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([examId])
  @@index([assignmentId])
  @@index([studentId])
}

model Attendance{
  id              String        @id @default(uuid())
  date            DateTime
  present         Boolean
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id] )
  lessonId        String
  lesson          Lesson        @relation(fields: [lessonId], references: [id]) 
  classId         String   
  class           Class         @relation(fields: [classId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([lessonId, studentId, date])

  @@index([studentId])
  @@index([lessonId])
  @@index([classId])
}

model Event {
  id              String        @id @default(uuid())
  title           String          
  description     String      
  classId         String?      
  class           Class?        @relation(fields: [classId], references: [id])
  creatorId       String         
  type            String       // e.g., 'ACADEMIC', 'EXTRA_CURRICULAR'
  location        String?
  targetRoles     Role[]
  reads           EventRead[]   
  visibility      EventVisibility
  status          EventStatus   @default(SCHEDULED)
  startTime       DateTime      
  endTime         DateTime      
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model EventRead {
  id       String   @id @default(uuid())
  eventId  String
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId   String
  readAt   DateTime @default(now())

  @@unique([eventId, userId])
}


model Announcement {
  id              String        @id @default(uuid())
  title           String
  content         String
  classId         String?
  class           Class?        @relation(fields: [classId], references: [id])
  targetRoles     Role[] 
  reads           AnnouncementRead[]   
  creatorId       String
  creatorRole     Role 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isArchived      Boolean       @default(false)
  archivedAt      DateTime?
}

model AnnouncementRead {
  id              String        @id @default(uuid())
  announcementId  String
  announcement    Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  userId          String        // The ID of the user who read the announcement
  readAt          DateTime      @default(now())
  deletedAt       DateTime?     // Null means not deleted


  @@unique([announcementId, userId])
  @@index([userId])
}

model RefreshToken {
  id              String       @id @default(uuid())
  token           String       @unique
  userId          String
  expires         DateTime
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model FeeStructure {
  id              String        @id @default(uuid())
  academicYear    String
  term            Term?
  type            FeeType      // YEARLY or TERM
  components      FeeComponent[]
  totalAmount     Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  invoices        Invoice[]
  classes         Class[]    
}

model FeeComponent {
  id              String        @id @default(uuid())
  name            String        // e.g., "Tuition", "Boarding", "Meals"
  description     String?
  amount          Float
  feeStructureId  String
  feeStructure    FeeStructure  @relation(fields: [feeStructureId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Invoice {
  id              String        @id @default(uuid())
  invoiceNumber   String        @unique
  parentId        String
  parent          Parent        @relation(fields: [parentId], references: [id])
  checkoutSessionId String?
  feeStructureId  String
  feeStructure    FeeStructure  @relation(fields: [feeStructureId], references: [id])
  totalAmount     Float
  paidAmount      Float         @default(0)
  status          InvoiceStatus @default(PENDING)
  dueDate         DateTime
  payments        Payment[]
  paymentIntentId String? 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Payment {
  id              String        @id @default(uuid())
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus
  paymentMethod   String        // e.g., "card", "bank_transfer"
  stripePaymentId String        @unique  // Stripe's payment intent ID
  description     String?
  metadata        Json?         // For any additional payment-related data
  invoiceId       String
  invoice         Invoice       @relation(fields: [invoiceId], references: [id])
  parentId        String
  parent          Parent        @relation(fields: [parentId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SecurityLog {
  id        String   @id @default(uuid())
  action    String   // FAILED_LOGIN, IP_BLOCKED, etc.
  username  String?
  ipAddress String
  timestamp DateTime @default(now())
  details   String?

  @@index([ipAddress])
  @@index([timestamp])
}

model Question {
  id              String        @id @default(uuid())
  examId          String?
  exam            Exam?         @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId    String?
  assignment      Assignment?   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  type            QuestionType
  content         String        // Markdown content for the question
  options         Json?         // For MCQs, store options as JSON
  correctAnswer   String?       // For MCQs, store the correct answer
  points          Float         @default(1.0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


enum QuestionType {
  MCQ
  ESSAY
  SHORT_ANSWER
  TRUE_FALSE
  MATCHING
}

enum Term {
  FIRST
  SECOND
  THIRD
}

enum FeeType {
  YEARLY
  TERM
}

enum InvoiceStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum Sex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  ADMIN
  SUPER_ADMIN
  TEACHER
  PARENT 
  STUDENT
}

enum EventStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum EventVisibility {
  PUBLIC 
  PRIVATE 
}

enum GradeType {
  EXAM
  ASSIGNMENT
  OVERALL
}



