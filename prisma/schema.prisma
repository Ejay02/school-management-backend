// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String        @id @default(uuid())
  username      String        @unique
  role          Role
  email         String?       
  password      String
  events        Event[]
  announcements Announcement[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Student {
  id            String        @id @default(uuid())
  username      String        @unique
  role          Role
  name          String  
  surname       String  
  email         String?       @unique
  password      String
  phone         String?       @unique
  address       String
  img           String?
  bloodType     String
  sex           Sex
  parentId      String
  parent        Parent        @relation(fields: [parentId], references: [id] )
  classId       String
  class         Class         @relation(fields: [classId], references: [id] )
  gradeId       String        @default(uuid())
  grade         Grade         @relation(fields: [gradeId], references: [id] )
  attendances   Attendance[]
  results       Result[]
  submissions   Submission[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Teacher{
  id            String        @id @default(uuid())
  username      String        @unique
  role          Role
  name          String  
  surname       String  
  email         String?       @unique
  password      String
  phone         String?       @unique
  address       String
  img           String?
  bloodType     String
  sex           Sex
  exams         Exam[]
  subjects      Subject[]
  lessons       Lesson[]
  classes       Class[]
  assignments   Assignment[]
  announcements Announcement[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Parent {
  id            String        @id @default(uuid())
  username      String        @unique
  role          Role
  name          String  
  surname       String  
  email         String?       @unique
  password      String
  phone         String        @unique
  address       String
  students      Student[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Grade {
  id            String        @id @default(uuid())
  level         Int              // Represents the grade level (e.g., 'A', 'B')
  // classes       Class[]       
  exams         Exam[]     
  students      Student[] 
  subjects      Subject[]     // Assuming relation to Subject
  submissions   Submission[]  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

}

model Class {
  id            String        @id @default(uuid())
  name          String        @unique
  capacity      Int 
  lessons       Lesson[]
  students      Student[]
  supervisorId  String?
  supervisor    Teacher?      @relation(fields: [supervisorId], references: [id] )
  // gradeId       Int
  // grade         Grade         @relation(fields: [gradeId], references: [id] )
  exams         Exam[]
  events        Event[]
  subjects      Subject[]   
  assignments   Assignment[]
  announcements Announcement[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subject {
  id            String        @id @default(uuid())
  name          String        
  exams         Exam[]
  teachers      Teacher[]
  lessons       Lesson[]
  assignments   Assignment[]
  gradeId       String?
  grade         Grade?        @relation(fields: [gradeId], references: [id] )
  classId       String
  class         Class         @relation(fields: [classId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Lesson {
  id            String        @id @default(uuid())
  name          String
  day           String
  startTime     String
  endTime       String
  subjectId     String
  subject       Subject       @relation(fields: [subjectId], references: [id] )
  classId       String
  class         Class         @relation(fields: [classId], references: [id])
  teacherId     String?
  teacher       Teacher?       @relation(fields: [teacherId], references: [id])
  exams         Exam[]
  assignments   Assignment[]
  attendances   Attendance[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Exam {
  id            String        @id @default(uuid())
  title         String
  startTime     DateTime
  endTime       DateTime
  lessonId      String
  lesson        Lesson        @relation(fields: [lessonId], references: [id])
  classId       String          
  class         Class         @relation(fields: [classId], references: [id])
  subjectId     String          
  subject       Subject       @relation(fields: [subjectId], references: [id])
  teacherId     String       
  teacher       Teacher       @relation(fields: [teacherId], references: [id])
  results       Result[]
  gradeId       String
  grade         Grade         @relation(fields: [gradeId], references: [id] )
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Assignment {
  id            String        @id @default(uuid())
  title         String    
  startDate     DateTime    
  dueDate       DateTime    
  lessonId      String   
  lesson        Lesson        @relation(fields: [lessonId], references: [id])
  teacherId     String        
  teacher       Teacher       @relation(fields: [teacherId], references: [id])
  subjectId     String   
  subject       Subject       @relation(fields: [subjectId], references: [id])
  classId       String   
  class         Class         @relation(fields: [classId], references: [id])
  results       Result[]    
  submissions   Submission[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Submission {
  id            String        @id @default(uuid())
  assignmentId  String
  assignment    Assignment    @relation(fields: [assignmentId], references: [id])
  studentId     String
  student       Student       @relation(fields: [studentId], references: [id] )
  gradeId       String
  grade         Grade?        @relation(fields: [gradeId], references: [id])  
  submissionDate DateTime     @default(now()) 
  status        String        // Submission status (e.g., 'submitted', 'graded', 'late')
  content       String?       // Optional field to store submission content (e.g., file URL or text)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Result {
  id            String        @id @default(uuid())
  score         Int
  examId        String?
  exam          Exam?         @relation(fields: [examId], references: [id]) 
  assignmentId  String?
  assignment    Assignment?   @relation(fields: [assignmentId], references: [id])  
  studentId     String
  student       Student       @relation(fields: [studentId], references: [id] )    
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Attendance{
  id            String        @id @default(uuid())
  date          DateTime
  present       Boolean
  studentId     String
  student       Student       @relation(fields: [studentId], references: [id] )
  lessonId      String
  lesson        Lesson        @relation(fields: [lessonId], references: [id]) 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Event {
  id          String           @id @default(uuid())
  title       String          
  description String      
  classId     String?      
  class       Class?          @relation(fields: [classId], references: [id])
  adminId     String         
  admin       Admin           @relation(fields: [adminId], references: [id]) // Add admin relation
  startTime   DateTime      
  endTime     DateTime      
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Announcement {
  id          String           @id @default(uuid())
  title       String
  description String
  classId     String?
  class       Class?          @relation(fields: [classId], references: [id])
  teacherId   String?   
  teacher     Teacher?        @relation(fields: [teacherId], references: [id]) 
  adminId     String?   
  admin       Admin?          @relation(fields: [adminId], references: [id]) 
  date        DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Sex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  ADMIN
  SUPER_ADMIN
  TEACHER
  PARENT 
  STUDENT
}